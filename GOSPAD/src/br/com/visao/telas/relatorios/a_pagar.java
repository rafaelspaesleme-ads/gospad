/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.visao.telas.relatorios;

import br.com.conexao.conexao;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rafael Paes Leme
 */
public class a_pagar extends javax.swing.JInternalFrame {

    /**
     * Creates new form clientes
     */
    public a_pagar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        bt_salvar_ccliente = new javax.swing.JButton();
        bt_limpar_ccliente = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        cbx_doc = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        cbx_id = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbx_situacao = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cbx_fornecedor = new javax.swing.JComboBox();
        id_fornecedor = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Relatorio de Contas a Pagar");

        jPanel3.setBackground(new java.awt.Color(0, 102, 153));

        bt_salvar_ccliente.setBackground(new java.awt.Color(0, 153, 204));
        bt_salvar_ccliente.setFont(new java.awt.Font("Khmer UI", 1, 14)); // NOI18N
        bt_salvar_ccliente.setForeground(new java.awt.Color(255, 255, 255));
        bt_salvar_ccliente.setText("IMPRIMIR");
        bt_salvar_ccliente.setBorderPainted(false);
        bt_salvar_ccliente.setContentAreaFilled(false);
        bt_salvar_ccliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bt_salvar_ccliente.setOpaque(true);
        bt_salvar_ccliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_salvar_cclienteActionPerformed(evt);
            }
        });

        bt_limpar_ccliente.setBackground(new java.awt.Color(0, 153, 204));
        bt_limpar_ccliente.setFont(new java.awt.Font("Khmer UI", 1, 14)); // NOI18N
        bt_limpar_ccliente.setForeground(new java.awt.Color(255, 255, 255));
        bt_limpar_ccliente.setText("LIMPAR");
        bt_limpar_ccliente.setBorderPainted(false);
        bt_limpar_ccliente.setContentAreaFilled(false);
        bt_limpar_ccliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bt_limpar_ccliente.setOpaque(true);
        bt_limpar_ccliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_limpar_cclienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bt_salvar_ccliente)
                .addGap(18, 18, 18)
                .addComponent(bt_limpar_ccliente)
                .addContainerGap(504, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_salvar_ccliente)
                    .addComponent(bt_limpar_ccliente))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Documento", "VL Total", "Fornecedor", "DT PGTO", "DT Vencimento", "DT Lançamento", "VL PGO", "VL A PAGAR", "Situação", "Observação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 255, 255)));

        jLabel17.setFont(new java.awt.Font("Khmer UI", 0, 11)); // NOI18N
        jLabel17.setText("Buscar por Documento");

        cbx_doc.setFont(new java.awt.Font("Khmer UI", 0, 11)); // NOI18N
        cbx_doc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione Documento" }));
        cbx_doc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cbx_docMousePressed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Khmer UI", 0, 11)); // NOI18N
        jLabel18.setText("Buscar por ID");

        cbx_id.setFont(new java.awt.Font("Khmer UI", 0, 11)); // NOI18N
        cbx_id.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ID" }));
        cbx_id.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cbx_idMousePressed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 153));
        jButton1.setFont(new java.awt.Font("Khmer UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(102, 255, 204));
        jButton1.setText("BUSCAR");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Khmer UI", 0, 11)); // NOI18N
        jLabel1.setText("Buscar por Situação");

        cbx_situacao.setFont(new java.awt.Font("Khmer UI", 0, 11)); // NOI18N
        cbx_situacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione a Situação" }));
        cbx_situacao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cbx_situacaoMousePressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Khmer UI", 0, 11)); // NOI18N
        jLabel2.setText("Buscar por Fornecedor");

        cbx_fornecedor.setFont(new java.awt.Font("Khmer UI", 0, 11)); // NOI18N
        cbx_fornecedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione Fornecedor" }));
        cbx_fornecedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cbx_fornecedorMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx_doc, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx_fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx_situacao, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cbx_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(cbx_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(cbx_situacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cbx_fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        id_fornecedor.setVisible(false);
        id_fornecedor.setText("iid fornecedor");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1305, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id_fornecedor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(id_fornecedor)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_salvar_cclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_salvar_cclienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_salvar_cclienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        CarregarInformacao();

// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbx_docMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbx_docMousePressed

        CBX_doc();
        cbx_doc.setEnabled(true);
        cbx_fornecedor.setEnabled(false);
        cbx_id.setEnabled(false);
        cbx_situacao.setEnabled(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_docMousePressed

    private void cbx_idMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbx_idMousePressed

        CBX_id();
        cbx_doc.setEnabled(false);
        cbx_fornecedor.setEnabled(false);
        cbx_id.setEnabled(true);
        cbx_situacao.setEnabled(false);

// TODO add your handling code here:
    }//GEN-LAST:event_cbx_idMousePressed

    private void cbx_fornecedorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbx_fornecedorMousePressed

        CBX_fornecedor();
        cbx_doc.setEnabled(false);
        cbx_fornecedor.setEnabled(true);
        cbx_id.setEnabled(false);
        cbx_situacao.setEnabled(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_fornecedorMousePressed

    private void cbx_situacaoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbx_situacaoMousePressed

        CBX_situacao();
        cbx_doc.setEnabled(false);
        cbx_fornecedor.setEnabled(false);
        cbx_id.setEnabled(false);
        cbx_situacao.setEnabled(true);

// TODO add your handling code here:
    }//GEN-LAST:event_cbx_situacaoMousePressed

    private void bt_limpar_cclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_limpar_cclienteActionPerformed

        LimparCampos();

// TODO add your handling code here:
    }//GEN-LAST:event_bt_limpar_cclienteActionPerformed

    public void CarregarInformacao() {

        String documento = (String) cbx_doc.getSelectedItem();
        String id = (String) cbx_id.getSelectedItem();
        String fornecedor = (String) cbx_fornecedor.getSelectedItem();
        String situacao = (String) cbx_situacao.getSelectedItem();

        boolean doc = cbx_doc.isEnabled();
        boolean id2 = cbx_id.isEnabled();
        boolean cli = cbx_fornecedor.isEnabled();
        boolean sit = cbx_situacao.isEnabled();

        if ("Selecione Documento".equals(documento) && "ID".equals(id) && "Selecione Clientes".equals(fornecedor) && "Selecione Situação".equals(situacao)) {
            CarregarTabela();
        } else {
            if (!"Selecione Documento".equals(documento) && id2 == false && cli == false && sit == false) {
                CarregarDoc();
            } else if (!"ID".equals(id) && doc == false && cli == false && sit == false) {
                CarregarID();
            } else if (!"Selecione Clientes".equals(fornecedor) && id2 == false && doc == false && sit == false) {
                CarregarFornecedor();
            } else if (!"Selecione Situação".equals(situacao)  && id2 == false && cli == false && doc == false) {
                CarregarSituacao();
            } else {
                JOptionPane.showMessageDialog(null, "Erro de pesquisa, reinicie esta Janela!");
            }
        }

    }

    public void CarregarDoc() {

        String buscarDoc = (String) cbx_doc.getSelectedItem();

        try {

            if (!buscarDoc.equals("")) {

                Connection conn = conexao.GeraConexao();

                String sql = "SELECT * FROM GOSPAD_BD.a_pagar WHERE documento = ?";

                PreparedStatement comando = conn.prepareStatement(sql);

                comando.setString(1, buscarDoc);

                ResultSet rs = comando.executeQuery();

                DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                modelo.setNumRows(0);

                while (rs.next()) {

                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    df.setLenient(false);

                    DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");
                    df2.setLenient(false);

                    DateFormat df3 = new SimpleDateFormat("dd/MM/yyyy");
                    df3.setLenient(false);

                    modelo.addRow(
                            new Object[]{
                                rs.getString("id"),
                                rs.getString("documento"),
                                rs.getString("vl_total").replace(".", ","),
                                rs.getString("id_fornecedor"),
                                df.format(rs.getDate("pgto_dt")),
                                df2.format(rs.getDate("vencimento_dt")),
                                df3.format(rs.getDate("lancamento_dt")),
                                rs.getString("vl_pago").replace(".", ","),
                                rs.getString("vl_apagar").replace(".", ","),
                                rs.getString("situacao"),
                                rs.getString("observacao")

                            }
                    );

                }

            } else {
                JOptionPane.showMessageDialog(null, "Selecione um nome!");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void CarregarID() {

        String buscarDoc = (String) cbx_id.getSelectedItem();

        try {

            if (!buscarDoc.equals("")) {

                Connection conn = conexao.GeraConexao();

                String sql = "SELECT * FROM GOSPAD_BD.a_pagar WHERE id = ?";

                PreparedStatement comando = conn.prepareStatement(sql);

                comando.setString(1, buscarDoc);

                ResultSet rs = comando.executeQuery();

                DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                modelo.setNumRows(0);

                while (rs.next()) {

                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    df.setLenient(false);

                    DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");
                    df2.setLenient(false);

                    DateFormat df3 = new SimpleDateFormat("dd/MM/yyyy");
                    df3.setLenient(false);

                    modelo.addRow(
                            new Object[]{
                                rs.getString("id"),
                                rs.getString("documento"),
                                rs.getString("vl_total").replace(".", ","),
                                rs.getString("id_fornecedor"),
                                df.format(rs.getDate("pgto_dt")),
                                df2.format(rs.getDate("vencimento_dt")),
                                df3.format(rs.getDate("lancamento_dt")),
                                rs.getString("vl_pago").replace(".", ","),
                                rs.getString("vl_apagar").replace(".", ","),
                                rs.getString("situacao"),
                                rs.getString("observacao")

                            }
                    );

                }

            } else {
                JOptionPane.showMessageDialog(null, "Selecione um nome!");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void CarregarFornecedor() {

        String buscarSit = (String) id_fornecedor.getText();

        try {

            if (!buscarSit.equals("")) {

                Connection conn = conexao.GeraConexao();

                String sql = "SELECT * FROM GOSPAD_BD.a_pagar WHERE id_fornecedor = ?";

                PreparedStatement comando = conn.prepareStatement(sql);

                comando.setString(1, buscarSit);

                ResultSet rs = comando.executeQuery();

                DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                modelo.setNumRows(0);

                while (rs.next()) {

                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    df.setLenient(false);

                    DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");
                    df2.setLenient(false);

                    DateFormat df3 = new SimpleDateFormat("dd/MM/yyyy");
                    df3.setLenient(false);

                    modelo.addRow(
                            new Object[]{
                                rs.getString("id"),
                                rs.getString("documento"),
                                rs.getString("vl_total").replace(".", ","),
                                rs.getString("id_fornecedor"),
                                df.format(rs.getDate("pgto_dt")),
                                df2.format(rs.getDate("vencimento_dt")),
                                df3.format(rs.getDate("lancamento_dt")),
                                rs.getString("vl_pago").replace(".", ","),
                                rs.getString("vl_apagar").replace(".", ","),
                                rs.getString("situacao"),
                                rs.getString("observacao")

                            }
                    );

                }

            } else {
                JOptionPane.showMessageDialog(null, "Selecione um nome!");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void CarregarSituacao() {

        String buscarSit = (String) cbx_situacao.getSelectedItem();

        try {

            if (!buscarSit.equals("")) {

                Connection conn = conexao.GeraConexao();

                String sql = "SELECT * FROM GOSPAD_BD.a_pagar WHERE situacao = ?";

                PreparedStatement comando = conn.prepareStatement(sql);

                comando.setString(1, buscarSit);

                ResultSet rs = comando.executeQuery();

                DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                modelo.setNumRows(0);

                while (rs.next()) {

                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    df.setLenient(false);

                    DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");
                    df2.setLenient(false);

                    DateFormat df3 = new SimpleDateFormat("dd/MM/yyyy");
                    df3.setLenient(false);

                    modelo.addRow(
                            new Object[]{
                                rs.getString("id"),
                                rs.getString("documento"),
                                rs.getString("vl_total").replace(".", ","),
                                rs.getString("id_fornecedor"),
                                df.format(rs.getDate("pgto_dt")),
                                df2.format(rs.getDate("vencimento_dt")),
                                df3.format(rs.getDate("lancamento_dt")),
                                rs.getString("vl_pago").replace(".", ","),
                                rs.getString("vl_apagar").replace(".", ","),
                                rs.getString("situacao"),
                                rs.getString("observacao")

                            }
                    );

                }

            } else {
                JOptionPane.showMessageDialog(null, "Selecione um nome!");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void CarregarIDFornecedor() {

        String buscarIDF = (String) id_fornecedor.getText();

        try {

            if (!buscarIDF.equals("")) {

                Connection conn = conexao.GeraConexao();

                String sql = "SELECT * FROM GOSPAD_BD.fornecedor WHERE id = ?";

                PreparedStatement comando = conn.prepareStatement(sql);

                comando.setString(1, buscarIDF);

                ResultSet rs = comando.executeQuery();

                cbx_fornecedor.removeAllItems();

                while (rs.next()) {

                    cbx_fornecedor.addItem(rs.getString("nome"));

                }

            } else {
                JOptionPane.showMessageDialog(null, "Selecione um nome!");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void CarregarTabela() {
        try {
            Connection conn = conexao.GeraConexao();

            String sql = "SELECT * FROM GOSPAD_BD.a_pagar";

            PreparedStatement comando = conn.prepareStatement(sql);

            ResultSet rs = comando.executeQuery();

            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            modelo.setNumRows(0);

            while (rs.next()) {

                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                df.setLenient(false);

                DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");
                df2.setLenient(false);

                DateFormat df3 = new SimpleDateFormat("dd/MM/yyyy");
                df3.setLenient(false);

                modelo.addRow(
                        new Object[]{
                            rs.getString("id"),
                            rs.getString("documento"),
                            rs.getString("vl_total").replace(".", ","),
                            rs.getString("id_fornecedor"),
                            df.format(rs.getDate("pgto_dt")),
                            df2.format(rs.getDate("vencimento_dt")),
                            df3.format(rs.getDate("lancamento_dt")),
                            rs.getString("vl_pago").replace(".", ","),
                            rs.getString("vl_apagar").replace(".", ","),
                            rs.getString("situacao"),
                            rs.getString("observacao")

                        }
                );
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Problemas ao tentar conectar com o banco de dados: " + e);
        }
    }

    public void CBX_doc() {

        try {

            Connection conn = conexao.GeraConexao();

            String sql = "SELECT * FROM GOSPAD_BD.a_pagar";

            PreparedStatement comando = conn.prepareStatement(sql);

            ResultSet rs = comando.executeQuery();

            cbx_doc.removeAllItems();

            while (rs.next()) {

                cbx_doc.addItem(rs.getString("documento"));

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void CBX_id() {

        try {

            Connection conn = conexao.GeraConexao();

            String sql = "SELECT * FROM GOSPAD_BD.a_pagar";

            PreparedStatement comando = conn.prepareStatement(sql);

            ResultSet rs = comando.executeQuery();

            cbx_id.removeAllItems();

            while (rs.next()) {

                cbx_id.addItem(rs.getString("id"));

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void CBX_fornecedor() {

        try {

            Connection conn = conexao.GeraConexao();

            String sql = "SELECT * FROM GOSPAD_BD.a_pagar";

            PreparedStatement comando = conn.prepareStatement(sql);

            ResultSet rs = comando.executeQuery();

            id_fornecedor.setText(null);

            while (rs.next()) {

                id_fornecedor.setText(rs.getString("id_fornecedor"));

            }

            CarregarIDFornecedor();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void CBX_situacao() {

        try {

            Connection conn = conexao.GeraConexao();

            String sql = "SELECT * FROM GOSPAD_BD.a_pagar";

            PreparedStatement comando = conn.prepareStatement(sql);

            ResultSet rs = comando.executeQuery();

            cbx_situacao.removeAllItems();

            while (rs.next()) {

                cbx_situacao.addItem(rs.getString("situacao"));

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void LimparCampos() {

        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setNumRows(0);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_limpar_ccliente;
    private javax.swing.JButton bt_salvar_ccliente;
    private javax.swing.JComboBox cbx_doc;
    private javax.swing.JComboBox cbx_fornecedor;
    private javax.swing.JComboBox cbx_id;
    private javax.swing.JComboBox cbx_situacao;
    private javax.swing.JLabel id_fornecedor;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
